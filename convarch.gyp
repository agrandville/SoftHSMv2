{
	'includes': [
		'configure.gypi'
	],
	'targets' : [{
		'target_name' :
			'convarch',
		'type' :
			'static_library',
		'sources' : [
			'src/lib/common/Configuration.cpp',
			'src/lib/common/Configuration.h',
			'src/lib/common/config.h',
			'src/lib/common/fatal.cpp',
			'src/lib/common/log.cpp',
			'src/lib/common/MutexFactory.cpp',
			'src/lib/common/osmutex.cpp',
			'src/lib/common/SimpleConfigLoader.cpp',
			'src/lib/crypto/AsymmetricAlgorithm.cpp',
			'src/lib/crypto/AsymmetricKeyPair.cpp',
			'src/lib/crypto/CryptoFactory.cpp',
			'src/lib/crypto/DESKey.cpp',
			'src/lib/crypto/DHParameters.cpp',
			'src/lib/crypto/DHPrivateKey.cpp',
			'src/lib/crypto/DHPublicKey.cpp',
			'src/lib/crypto/DSAParameters.cpp',
			'src/lib/crypto/DSAPrivateKey.cpp',
			'src/lib/crypto/DSAPublicKey.cpp',
			'src/lib/crypto/ECParameters.cpp',
			'src/lib/crypto/ECPrivateKey.cpp',
			'src/lib/crypto/ECPublicKey.cpp',
			'src/lib/crypto/GOSTPrivateKey.cpp',
			'src/lib/crypto/GOSTPublicKey.cpp',
			'src/lib/crypto/HashAlgorithm.cpp',
			'src/lib/crypto/MacAlgorithm.cpp',
			'src/lib/crypto/RSAParameters.cpp',
			'src/lib/crypto/RSAPrivateKey.cpp',
			'src/lib/crypto/RSAPublicKey.cpp',
			'src/lib/crypto/SymmetricAlgorithm.cpp',
			'src/lib/crypto/SymmetricKey.cpp',
			'src/lib/data_mgr/ByteString.cpp',
			'src/lib/data_mgr/RFC4880.cpp',
			'src/lib/data_mgr/salloc.cpp',
			'src/lib/data_mgr/SecureDataManager.cpp',
			'src/lib/data_mgr/SecureMemoryRegistry.cpp',
			'src/lib/handle_mgr/Handle.cpp',
			'src/lib/handle_mgr/HandleManager.cpp',
			'src/lib/object_store/Directory.cpp',
			'src/lib/object_store/File.cpp',
			'src/lib/object_store/FindOperation.cpp',
			'src/lib/object_store/Generation.cpp',
			'src/lib/object_store/ObjectFile.cpp',
			'src/lib/object_store/ObjectStore.cpp',
			'src/lib/object_store/ObjectStoreToken.cpp',
			'src/lib/object_store/OSAttribute.cpp',
			'src/lib/object_store/OSToken.cpp',
			'src/lib/object_store/SessionObject.cpp',
			'src/lib/object_store/SessionObjectStore.cpp',
			'src/lib/object_store/UUID.cpp',
			'src/lib/session_mgr/Session.cpp',
			'src/lib/session_mgr/SessionManager.cpp',
			'src/lib/slot_mgr/Slot.cpp',
			'src/lib/slot_mgr/SlotManager.cpp',
			'src/lib/slot_mgr/Token.cpp',
		],
		'include_dirs' : [
			'src/lib',
			'src/lib/cryptoki_compat',
			'src/lib/common',
			'src/lib/object_store',
			'src/lib/slot_mgr',
			'src/lib/session_mgr',
			'src/lib/handle_mgr',
			'src/lib/crypto',
			'src/lib/win32',
			'src/lib/data_mgr'
		],
		'conditions' : [
			['OS=="win"',{
				'sources' : [
					'src/lib/win32/syslog.cpp',
				],
				'include_dirs' : [
					'src/lib/win32',			
				],
				'defines': [
					'HAVE_LOADLIBRARY',
				]}
			],
			[ 'build_with_botan==1', {
				'sources' : [
					'src/lib/crypto/BotanDH.cpp',
					'src/lib/crypto/BotanAES.cpp',
					'src/lib/crypto/BotanAES.cpp',
					'src/lib/crypto/BotanAES.h',
					'src/lib/crypto/BotanCryptoFactory.cpp',
					'src/lib/crypto/BotanCryptoFactory.h',
					'src/lib/crypto/BotanDES.cpp',
					'src/lib/crypto/BotanDES.h',
					'src/lib/crypto/BotanDH.cpp',
					'src/lib/crypto/BotanDH.h',
					'src/lib/crypto/BotanDHKeyPair.cpp',
					'src/lib/crypto/BotanDHKeyPair.h',
					'src/lib/crypto/BotanDHPrivateKey.cpp',
					'src/lib/crypto/BotanDHPrivateKey.h',
					'src/lib/crypto/BotanDHPublicKey.cpp',
					'src/lib/crypto/BotanDHPublicKey.h',
					'src/lib/crypto/BotanDSA.cpp',
					'src/lib/crypto/BotanDSA.h',
					'src/lib/crypto/BotanDSAKeyPair.cpp',
					'src/lib/crypto/BotanDSAKeyPair.h',
					'src/lib/crypto/BotanDSAPrivateKey.cpp',
					'src/lib/crypto/BotanDSAPrivateKey.h',
					'src/lib/crypto/BotanDSAPublicKey.cpp',
					'src/lib/crypto/BotanDSAPublicKey.h',
					'src/lib/crypto/BotanECDH.cpp',
					'src/lib/crypto/BotanECDH.h',
					'src/lib/crypto/BotanECDHKeyPair.cpp',
					'src/lib/crypto/BotanECDHKeyPair.h',
					'src/lib/crypto/BotanECDHPrivateKey.cpp',
					'src/lib/crypto/BotanECDHPrivateKey.h',
					'src/lib/crypto/BotanECDHPublicKey.cpp',
					'src/lib/crypto/BotanECDHPublicKey.h',
					'src/lib/crypto/BotanECDSA.cpp',
					'src/lib/crypto/BotanECDSA.h',
					'src/lib/crypto/BotanECDSAKeyPair.cpp',
					'src/lib/crypto/BotanECDSAKeyPair.h',
					'src/lib/crypto/BotanECDSAPrivateKey.cpp',
					'src/lib/crypto/BotanECDSAPrivateKey.h',
					'src/lib/crypto/BotanECDSAPublicKey.cpp',
					'src/lib/crypto/BotanECDSAPublicKey.h',
					'src/lib/crypto/BotanGOST.cpp',
					'src/lib/crypto/BotanGOST.h',
					'src/lib/crypto/BotanGOSTKeyPair.cpp',
					'src/lib/crypto/BotanGOSTKeyPair.h',
					'src/lib/crypto/BotanGOSTPrivateKey.cpp',
					'src/lib/crypto/BotanGOSTPrivateKey.h',
					'src/lib/crypto/BotanGOSTPublicKey.cpp',
					'src/lib/crypto/BotanGOSTPublicKey.h',
					'src/lib/crypto/BotanGOSTR3411.cpp',
					'src/lib/crypto/BotanGOSTR3411.h',
					'src/lib/crypto/BotanHashAlgorithm.cpp',
					'src/lib/crypto/BotanHashAlgorithm.h',
					'src/lib/crypto/BotanHMAC.cpp',
					'src/lib/crypto/BotanHMAC.h',
					'src/lib/crypto/BotanMacAlgorithm.cpp',
					'src/lib/crypto/BotanMacAlgorithm.h',
					'src/lib/crypto/BotanMD5.cpp',
					'src/lib/crypto/BotanMD5.h',
					'src/lib/crypto/BotanRNG.cpp',
					'src/lib/crypto/BotanRNG.h',
					'src/lib/crypto/BotanRSA.cpp',
					'src/lib/crypto/BotanRSA.h',
					'src/lib/crypto/BotanRSAKeyPair.cpp',
					'src/lib/crypto/BotanRSAKeyPair.h',
					'src/lib/crypto/BotanRSAPrivateKey.cpp',
					'src/lib/crypto/BotanRSAPrivateKey.h',
					'src/lib/crypto/BotanRSAPublicKey.cpp',
					'src/lib/crypto/BotanRSAPublicKey.h',
					'src/lib/crypto/BotanSHA1.cpp',
					'src/lib/crypto/BotanSHA1.h',
					'src/lib/crypto/BotanSHA224.cpp',
					'src/lib/crypto/BotanSHA224.h',
					'src/lib/crypto/BotanSHA256.cpp',
					'src/lib/crypto/BotanSHA256.h',
					'src/lib/crypto/BotanSHA384.cpp',
					'src/lib/crypto/BotanSHA384.h',
					'src/lib/crypto/BotanSHA512.cpp',
					'src/lib/crypto/BotanSHA512.h',
					'src/lib/crypto/BotanSymmetricAlgorithm.cpp',
					'src/lib/crypto/BotanSymmetricAlgorithm.h',
					'src/lib/crypto/BotanUtil.cpp',
					'src/lib/crypto/BotanUtil.h'
					],
					'include_dirs' : [
						'../../botan/build/include'
					],
					'defines': [
						'WITH_BOTAN',
					],
			}],
			[ 'build_with_openssl==1', {
				'sources' : [
					'src/lib/crypto/OSSLAES.cpp',						
					'src/lib/crypto/OSSLCryptoFactory.cpp',						
					'src/lib/crypto/OSSLDES.cpp',						
					'src/lib/crypto/OSSLDH.cpp',						
					'src/lib/crypto/OSSLDHKeyPair.cpp',						
					'src/lib/crypto/OSSLDHPrivateKey.cpp',						
					'src/lib/crypto/OSSLDHPublicKey.cpp',						
					'src/lib/crypto/OSSLDSA.cpp',						
					'src/lib/crypto/OSSLDSAKeyPair.cpp',						
					'src/lib/crypto/OSSLDSAPrivateKey.cpp',						
					'src/lib/crypto/OSSLDSAPublicKey.cpp',						
					'src/lib/crypto/OSSLECDH.cpp',						
					'src/lib/crypto/OSSLECDSA.cpp',						
					'src/lib/crypto/OSSLECKeyPair.cpp',						
					'src/lib/crypto/OSSLECPrivateKey.cpp',						
					'src/lib/crypto/OSSLECPublicKey.cpp',						
					'src/lib/crypto/OSSLEVPHashAlgorithm.cpp',						
					'src/lib/crypto/OSSLEVPMacAlgorithm.cpp',						
					'src/lib/crypto/OSSLEVPSymmetricAlgorithm.cpp',						
					'src/lib/crypto/OSSLGOST.cpp',						
					'src/lib/crypto/OSSLGOSTKeyPair.cpp',						
					'src/lib/crypto/OSSLGOSTPrivateKey.cpp',						
					'src/lib/crypto/OSSLGOSTPublicKey.cpp',						
					'src/lib/crypto/OSSLGOSTR3411.cpp',						
					'src/lib/crypto/OSSLHMAC.cpp',						
					'src/lib/crypto/OSSLMD5.cpp',						
					'src/lib/crypto/OSSLRNG.cpp',						
					'src/lib/crypto/OSSLRSA.cpp',						
					'src/lib/crypto/OSSLRSAKeyPair.cpp',						
					'src/lib/crypto/OSSLRSAPrivateKey.cpp',						
					'src/lib/crypto/OSSLRSAPublicKey.cpp',						
					'src/lib/crypto/OSSLSHA1.cpp',						
					'src/lib/crypto/OSSLSHA224.cpp',						
					'src/lib/crypto/OSSLSHA256.cpp',						
					'src/lib/crypto/OSSLSHA384.cpp',						
					'src/lib/crypto/OSSLSHA512.cpp',						
					'src/lib/crypto/OSSLUtil.cpp',						
				],
				'include_dirs' : [
					'../../openssl/include'
				],
				'defines': [
					'WITH_OPENSSL',
				],
			}],
			[ 'enable_aes_key_wrap==1', {'defines': ['HAVE_AES_KEY_WRAP',],}],
			[ 'enable_ecc==1', {'defines': ['WITH_ECC',],}],
			[ 'enable_ghost==1', {'defines': ['WITH_GOST',],}],
			[ 'enable_debug_to_stderr==1', {'defines': ['DEBUG_LOG_STDERR',],}],
			
		]
	}],
    'target_defaults': {
		'default_configuration': 'Release',
		'configurations': {
		'Debug': {
			'defines': [ 'DEBUG', '_DEBUG' ],
			'msvs_settings': {
			'VCCLCompilerTool': {
				'RuntimeLibrary': 1, 
				'Optimization': 0,
			},
			'VCLinkerTool': {
				'LinkTimeCodeGeneration': 0,
				'OptimizeReferences': 2,
				'EnableCOMDATFolding': 2,
				'LinkIncremental': 1,
				'GenerateDebugInformation': 'true',
				'AdditionalLibraryDirectories': [
					'../../openssl/out32.dbg'
				]
			}          
			}
		},
		'Release': {
			'defines': [ 'NDEBUG' ],
			'msvs_settings': {
			'VCCLCompilerTool': {
				'RuntimeLibrary': 0,
				'Optimization': 3,
				'FavorSizeOrSpeed': 1,
				'InlineFunctionExpansion': 2,
				'WholeProgramOptimization': 'true',
				'OmitFramePointers': 'true',
				'EnableFunctionLevelLinking': 'true',
				'EnableIntrinsicFunctions': 'true'            
			},
			'VCLinkerTool': {
				'LinkTimeCodeGeneration': 1,
				'OptimizeReferences': 2,
				'EnableCOMDATFolding': 2,
				'LinkIncremental': 1,
				'AdditionalLibraryDirectories': [
				'../../openssl/out32'
				]            
			},
			'VCLibrarianTool': {
				'AdditionalOptions': [
					'/LTCG', # link time code generation
				],
			},
			}
		}
		}  
	}
}
